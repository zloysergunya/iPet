//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 20 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `activityGreenColor`.
    static let activityGreenColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "activityGreenColor")
    /// Color `activityOrangeColor`.
    static let activityOrangeColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "activityOrangeColor")
    /// Color `activityRedColor`.
    static let activityRedColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "activityRedColor")
    /// Color `background`.
    static let background = Rswift.ColorResource(bundle: R.hostingBundle, name: "background")
    /// Color `blueAccentDarker`.
    static let blueAccentDarker = Rswift.ColorResource(bundle: R.hostingBundle, name: "blueAccentDarker")
    /// Color `blueAccent`.
    static let blueAccent = Rswift.ColorResource(bundle: R.hostingBundle, name: "blueAccent")
    /// Color `darkGray`.
    static let darkGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkGray")
    /// Color `disabled`.
    static let disabled = Rswift.ColorResource(bundle: R.hostingBundle, name: "disabled")
    /// Color `grayColor`.
    static let grayColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayColor")
    /// Color `grayText`.
    static let grayText = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayText")
    /// Color `orangeAccentDarker`.
    static let orangeAccentDarker = Rswift.ColorResource(bundle: R.hostingBundle, name: "orangeAccentDarker")
    /// Color `orangeAccentLight`.
    static let orangeAccentLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "orangeAccentLight")
    /// Color `orangeAccent`.
    static let orangeAccent = Rswift.ColorResource(bundle: R.hostingBundle, name: "orangeAccent")
    /// Color `pinkAccent`.
    static let pinkAccent = Rswift.ColorResource(bundle: R.hostingBundle, name: "pinkAccent")
    /// Color `secondBackground`.
    static let secondBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondBackground")
    /// Color `segmentedControl`.
    static let segmentedControl = Rswift.ColorResource(bundle: R.hostingBundle, name: "segmentedControl")
    /// Color `textPrimary`.
    static let textPrimary = Rswift.ColorResource(bundle: R.hostingBundle, name: "textPrimary")
    /// Color `textSecondary`.
    static let textSecondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "textSecondary")
    /// Color `textTF`.
    static let textTF = Rswift.ColorResource(bundle: R.hostingBundle, name: "textTF")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "activityGreenColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func activityGreenColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.activityGreenColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "activityOrangeColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func activityOrangeColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.activityOrangeColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "activityRedColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func activityRedColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.activityRedColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blueAccent", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueAccent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueAccent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "blueAccentDarker", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueAccentDarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueAccentDarker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "disabled", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func disabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.disabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "orangeAccent", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orangeAccent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orangeAccent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "orangeAccentDarker", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orangeAccentDarker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orangeAccentDarker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "orangeAccentLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orangeAccentLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orangeAccentLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "pinkAccent", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func pinkAccent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.pinkAccent, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "segmentedControl", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func segmentedControl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.segmentedControl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textPrimary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textPrimary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textPrimary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textSecondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textSecondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textSecondary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textTF", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textTF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textTF, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "activityGreenColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func activityGreenColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.activityGreenColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "activityOrangeColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func activityOrangeColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.activityOrangeColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "activityRedColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func activityRedColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.activityRedColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blueAccent", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blueAccent(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blueAccent.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "blueAccentDarker", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blueAccentDarker(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blueAccentDarker.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "darkGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "disabled", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func disabled(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.disabled.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "orangeAccent", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orangeAccent(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orangeAccent.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "orangeAccentDarker", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orangeAccentDarker(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orangeAccentDarker.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "orangeAccentLight", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orangeAccentLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orangeAccentLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "pinkAccent", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func pinkAccent(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.pinkAccent.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "secondBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "segmentedControl", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func segmentedControl(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.segmentedControl.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textPrimary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textPrimary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textPrimary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textSecondary", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textSecondary(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textSecondary.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textTF", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textTF(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textTF.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 4 properties.
  struct entitlements {
    static let comAppleDeveloperHealthkit = true
    static let comAppleDeveloperHealthkitBackgroundDelivery = true

    struct comAppleDeveloperApplesignin {
      static let `default` = infoPlistString(path: ["com.apple.developer.applesignin"], key: "Default") ?? "Default"

      fileprivate init() {}
    }

    struct comAppleDeveloperHealthkitAccess {
      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 12 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `MontserratBold.ttf`.
    static let montserratBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "MontserratBold", pathExtension: "ttf")
    /// Resource file `MontserratMedium.ttf`.
    static let montserratMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "MontserratMedium", pathExtension: "ttf")
    /// Resource file `MontserratRegular.ttf`.
    static let montserratRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "MontserratRegular", pathExtension: "ttf")
    /// Resource file `MontserratSemiBold.ttf`.
    static let montserratSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "MontserratSemiBold", pathExtension: "ttf")
    /// Resource file `SFUIDisplay-Light.ttf`.
    static let sfuiDisplayLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Light", pathExtension: "ttf")
    /// Resource file `SFUIDisplay-Regular.ttf`.
    static let sfuiDisplayRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIDisplay-Regular", pathExtension: "ttf")
    /// Resource file `SFUIText-Bold.ttf`.
    static let sfuiTextBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Bold", pathExtension: "ttf")
    /// Resource file `SFUIText-Light.ttf`.
    static let sfuiTextLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Light", pathExtension: "ttf")
    /// Resource file `SFUIText-Medium.ttf`.
    static let sfuiTextMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Medium", pathExtension: "ttf")
    /// Resource file `SFUIText-Regular.ttf`.
    static let sfuiTextRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Regular", pathExtension: "ttf")
    /// Resource file `SFUIText-Semibold.ttf`.
    static let sfuiTextSemiboldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFUIText-Semibold", pathExtension: "ttf")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MontserratBold", withExtension: "ttf")`
    static func montserratBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MontserratMedium", withExtension: "ttf")`
    static func montserratMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MontserratRegular", withExtension: "ttf")`
    static func montserratRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MontserratSemiBold", withExtension: "ttf")`
    static func montserratSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFUIDisplay-Light", withExtension: "ttf")`
    static func sfuiDisplayLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiDisplayLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFUIDisplay-Regular", withExtension: "ttf")`
    static func sfuiDisplayRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiDisplayRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFUIText-Bold", withExtension: "ttf")`
    static func sfuiTextBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiTextBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFUIText-Light", withExtension: "ttf")`
    static func sfuiTextLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiTextLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFUIText-Medium", withExtension: "ttf")`
    static func sfuiTextMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiTextMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFUIText-Regular", withExtension: "ttf")`
    static func sfuiTextRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiTextRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SFUIText-Semibold", withExtension: "ttf")`
    static func sfuiTextSemiboldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuiTextSemiboldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 11 fonts.
  struct font: Rswift.Validatable {
    /// Font `Montserrat-Bold`.
    static let montserratBold = Rswift.FontResource(fontName: "Montserrat-Bold")
    /// Font `Montserrat-Medium`.
    static let montserratMedium = Rswift.FontResource(fontName: "Montserrat-Medium")
    /// Font `Montserrat-Regular`.
    static let montserratRegular = Rswift.FontResource(fontName: "Montserrat-Regular")
    /// Font `Montserrat-SemiBold`.
    static let montserratSemiBold = Rswift.FontResource(fontName: "Montserrat-SemiBold")
    /// Font `SFUIDisplay-Light`.
    static let sfuiDisplayLight = Rswift.FontResource(fontName: "SFUIDisplay-Light")
    /// Font `SFUIDisplay-Regular`.
    static let sfuiDisplayRegular = Rswift.FontResource(fontName: "SFUIDisplay-Regular")
    /// Font `SFUIText-Bold`.
    static let sfuiTextBold = Rswift.FontResource(fontName: "SFUIText-Bold")
    /// Font `SFUIText-Light`.
    static let sfuiTextLight = Rswift.FontResource(fontName: "SFUIText-Light")
    /// Font `SFUIText-Medium`.
    static let sfuiTextMedium = Rswift.FontResource(fontName: "SFUIText-Medium")
    /// Font `SFUIText-Regular`.
    static let sfuiTextRegular = Rswift.FontResource(fontName: "SFUIText-Regular")
    /// Font `SFUIText-Semibold`.
    static let sfuiTextSemibold = Rswift.FontResource(fontName: "SFUIText-Semibold")

    /// `UIFont(name: "Montserrat-Bold", size: ...)`
    static func montserratBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratBold, size: size)
    }

    /// `UIFont(name: "Montserrat-Medium", size: ...)`
    static func montserratMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratMedium, size: size)
    }

    /// `UIFont(name: "Montserrat-Regular", size: ...)`
    static func montserratRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratRegular, size: size)
    }

    /// `UIFont(name: "Montserrat-SemiBold", size: ...)`
    static func montserratSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratSemiBold, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Light", size: ...)`
    static func sfuiDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayLight, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Regular", size: ...)`
    static func sfuiDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayRegular, size: size)
    }

    /// `UIFont(name: "SFUIText-Bold", size: ...)`
    static func sfuiTextBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextBold, size: size)
    }

    /// `UIFont(name: "SFUIText-Light", size: ...)`
    static func sfuiTextLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextLight, size: size)
    }

    /// `UIFont(name: "SFUIText-Medium", size: ...)`
    static func sfuiTextMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextMedium, size: size)
    }

    /// `UIFont(name: "SFUIText-Regular", size: ...)`
    static func sfuiTextRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextRegular, size: size)
    }

    /// `UIFont(name: "SFUIText-Semibold", size: ...)`
    static func sfuiTextSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiTextSemibold, size: size)
    }

    static func validate() throws {
      if R.font.montserratBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Bold' could not be loaded, is 'MontserratBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Medium' could not be loaded, is 'MontserratMedium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Regular' could not be loaded, is 'MontserratRegular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-SemiBold' could not be loaded, is 'MontserratSemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Light' could not be loaded, is 'SFUIDisplay-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Regular' could not be loaded, is 'SFUIDisplay-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Bold' could not be loaded, is 'SFUIText-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Light' could not be loaded, is 'SFUIText-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Medium' could not be loaded, is 'SFUIText-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Regular' could not be loaded, is 'SFUIText-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiTextSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIText-Semibold' could not be loaded, is 'SFUIText-Semibold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 40 images.
  struct image {
    /// Image `addPhotoButton`.
    static let addPhotoButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "addPhotoButton")
    /// Image `addUser`.
    static let addUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "addUser")
    /// Image `add_30`.
    static let add_30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_30")
    /// Image `appleLogo`.
    static let appleLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "appleLogo")
    /// Image `challenge`.
    static let challenge = Rswift.ImageResource(bundle: R.hostingBundle, name: "challenge")
    /// Image `completedAchivment118`.
    static let completedAchivment118 = Rswift.ImageResource(bundle: R.hostingBundle, name: "completedAchivment118")
    /// Image `completedAchivment`.
    static let completedAchivment = Rswift.ImageResource(bundle: R.hostingBundle, name: "completedAchivment")
    /// Image `editButton`.
    static let editButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "editButton")
    /// Image `exitAccount`.
    static let exitAccount = Rswift.ImageResource(bundle: R.hostingBundle, name: "exitAccount")
    /// Image `femaleGender`.
    static let femaleGender = Rswift.ImageResource(bundle: R.hostingBundle, name: "femaleGender")
    /// Image `foxMascote`.
    static let foxMascote = Rswift.ImageResource(bundle: R.hostingBundle, name: "foxMascote")
    /// Image `globalSearch`.
    static let globalSearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "globalSearch")
    /// Image `googleLogo`.
    static let googleLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "googleLogo")
    /// Image `lama`.
    static let lama = Rswift.ImageResource(bundle: R.hostingBundle, name: "lama")
    /// Image `lemur`.
    static let lemur = Rswift.ImageResource(bundle: R.hostingBundle, name: "lemur")
    /// Image `maleGender`.
    static let maleGender = Rswift.ImageResource(bundle: R.hostingBundle, name: "maleGender")
    /// Image `manPhoto`.
    static let manPhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "manPhoto")
    /// Image `minusButton`.
    static let minusButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "minusButton")
    /// Image `missedAchivment118`.
    static let missedAchivment118 = Rswift.ImageResource(bundle: R.hostingBundle, name: "missedAchivment118")
    /// Image `missedAchivment`.
    static let missedAchivment = Rswift.ImageResource(bundle: R.hostingBundle, name: "missedAchivment")
    /// Image `petImage`.
    static let petImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "petImage")
    /// Image `petPageContollStep1`.
    static let petPageContollStep1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "petPageContollStep1")
    /// Image `petPageContollStep2`.
    static let petPageContollStep2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "petPageContollStep2")
    /// Image `petPageContollStep4`.
    static let petPageContollStep4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "petPageContollStep4")
    /// Image `petRandomNameIcon`.
    static let petRandomNameIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "petRandomNameIcon")
    /// Image `petShop`.
    static let petShop = Rswift.ImageResource(bundle: R.hostingBundle, name: "petShop")
    /// Image `photoPlaceholder`.
    static let photoPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "photoPlaceholder")
    /// Image `plug`.
    static let plug = Rswift.ImageResource(bundle: R.hostingBundle, name: "plug")
    /// Image `plusButton`.
    static let plusButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "plusButton")
    /// Image `recall`.
    static let recall = Rswift.ImageResource(bundle: R.hostingBundle, name: "recall")
    /// Image `removeFriend`.
    static let removeFriend = Rswift.ImageResource(bundle: R.hostingBundle, name: "removeFriend")
    /// Image `removeUser`.
    static let removeUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "removeUser")
    /// Image `rightArrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightArrow")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `shopBags`.
    static let shopBags = Rswift.ImageResource(bundle: R.hostingBundle, name: "shopBags")
    /// Image `socialNetworks`.
    static let socialNetworks = Rswift.ImageResource(bundle: R.hostingBundle, name: "socialNetworks")
    /// Image `stepCountFox`.
    static let stepCountFox = Rswift.ImageResource(bundle: R.hostingBundle, name: "stepCountFox")
    /// Image `storeGoods`.
    static let storeGoods = Rswift.ImageResource(bundle: R.hostingBundle, name: "storeGoods")
    /// Image `subscribers`.
    static let subscribers = Rswift.ImageResource(bundle: R.hostingBundle, name: "subscribers")
    /// Image `tabBarActivity`.
    static let tabBarActivity = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarActivity")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addPhotoButton", bundle: ..., traitCollection: ...)`
    static func addPhotoButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addPhotoButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "addUser", bundle: ..., traitCollection: ...)`
    static func addUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addUser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_30", bundle: ..., traitCollection: ...)`
    static func add_30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "appleLogo", bundle: ..., traitCollection: ...)`
    static func appleLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.appleLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "challenge", bundle: ..., traitCollection: ...)`
    static func challenge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.challenge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "completedAchivment", bundle: ..., traitCollection: ...)`
    static func completedAchivment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.completedAchivment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "completedAchivment118", bundle: ..., traitCollection: ...)`
    static func completedAchivment118(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.completedAchivment118, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "editButton", bundle: ..., traitCollection: ...)`
    static func editButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "exitAccount", bundle: ..., traitCollection: ...)`
    static func exitAccount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exitAccount, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "femaleGender", bundle: ..., traitCollection: ...)`
    static func femaleGender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.femaleGender, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "foxMascote", bundle: ..., traitCollection: ...)`
    static func foxMascote(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foxMascote, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "globalSearch", bundle: ..., traitCollection: ...)`
    static func globalSearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.globalSearch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "googleLogo", bundle: ..., traitCollection: ...)`
    static func googleLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.googleLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lama", bundle: ..., traitCollection: ...)`
    static func lama(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lama, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lemur", bundle: ..., traitCollection: ...)`
    static func lemur(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lemur, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "maleGender", bundle: ..., traitCollection: ...)`
    static func maleGender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maleGender, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "manPhoto", bundle: ..., traitCollection: ...)`
    static func manPhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.manPhoto, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minusButton", bundle: ..., traitCollection: ...)`
    static func minusButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minusButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "missedAchivment", bundle: ..., traitCollection: ...)`
    static func missedAchivment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.missedAchivment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "missedAchivment118", bundle: ..., traitCollection: ...)`
    static func missedAchivment118(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.missedAchivment118, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "petImage", bundle: ..., traitCollection: ...)`
    static func petImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.petImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "petPageContollStep1", bundle: ..., traitCollection: ...)`
    static func petPageContollStep1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.petPageContollStep1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "petPageContollStep2", bundle: ..., traitCollection: ...)`
    static func petPageContollStep2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.petPageContollStep2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "petPageContollStep4", bundle: ..., traitCollection: ...)`
    static func petPageContollStep4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.petPageContollStep4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "petRandomNameIcon", bundle: ..., traitCollection: ...)`
    static func petRandomNameIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.petRandomNameIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "petShop", bundle: ..., traitCollection: ...)`
    static func petShop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.petShop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photoPlaceholder", bundle: ..., traitCollection: ...)`
    static func photoPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photoPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plug", bundle: ..., traitCollection: ...)`
    static func plug(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plug, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plusButton", bundle: ..., traitCollection: ...)`
    static func plusButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plusButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "recall", bundle: ..., traitCollection: ...)`
    static func recall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recall, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "removeFriend", bundle: ..., traitCollection: ...)`
    static func removeFriend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.removeFriend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "removeUser", bundle: ..., traitCollection: ...)`
    static func removeUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.removeUser, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rightArrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shopBags", bundle: ..., traitCollection: ...)`
    static func shopBags(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shopBags, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "socialNetworks", bundle: ..., traitCollection: ...)`
    static func socialNetworks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.socialNetworks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stepCountFox", bundle: ..., traitCollection: ...)`
    static func stepCountFox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stepCountFox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "storeGoods", bundle: ..., traitCollection: ...)`
    static func storeGoods(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.storeGoods, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "subscribers", bundle: ..., traitCollection: ...)`
    static func subscribers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.subscribers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabBarActivity", bundle: ..., traitCollection: ...)`
    static func tabBarActivity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarActivity, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
